#pragma once

#include <stdint.h>
#include <unordered_map>

typedef {{state_dt}} state_t;
typedef {{state_delta_dt}} state_delta_t;
typedef state_t encoding_table_t;
typedef {{nb_bits_dt}} nb_bits_delta_t;
typedef {{nb_dt}} nb_t;
typedef {{message_dt}} message_t;

#define TABLE_SIZE_LOG {{ans.tsl}}
#define TABLE_SIZE {{ans.ts}}
#define ALPHABET_LENGTH {{ans.allen}}

namespace StaticTable {

	const state_t states[TABLE_SIZE] = {
	    {{states}}
	};
	
	const state_t new_x[TABLE_SIZE] = {
	    {{new_x}}
	};
	
	const encoding_table_t encoding_table[TABLE_SIZE] = {
	    {{encoding_table}}
	};
	
	const nb_bits_delta_t nb_bits_delta[TABLE_SIZE] = {
	    {{nb_bits}}
	};
	
	const nb_t nb[TABLE_SIZE] = {
	    {{nb}}
	};
	
	const state_delta_t start[ALPHABET_LENGTH] = {
	    {{start}}
	};
	
	const state_t adj_start[ALPHABET_LENGTH] = {
	    {{adj_start}}
	};

	const message_t alphabet[ALPHABET_LENGTH] = {
		{{alphabet}}
	};

	const std::unordered_map<message_t, u32> reverseAlphabet = {
		{{reverseAlphabet}}
	};
}
